name: Binary Prime Engine CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # No external dependencies needed for core functionality
    
    - name: Test basic functionality
      run: |
        python binary_prime_engine.py --help || true
        python binary_prime_engine_pro.py --help
    
    - name: Run quick prime generation test
      run: |
        python binary_prime_engine_pro.py --start 1 --limit 10 --quiet
    
    - name: Run benchmark
      run: |
        python benchmark.py
    
    - name: Test different output formats
      run: |
        python binary_prime_engine_pro.py --start 100 --limit 5 --format json --quiet
        python binary_prime_engine_pro.py --start 100 --limit 5 --format csv --output test.csv --quiet
        cat test.csv

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install code quality tools
      run: |
        python -m pip install black mypy flake8
    
    - name: Check code formatting with black
      run: |
        black --check --diff *.py
    
    - name: Type checking with mypy
      run: |
        mypy *.py --ignore-missing-imports
    
    - name: Lint with flake8
      run: |
        flake8 *.py --max-line-length=88 --extend-ignore=E203,W503

  performance:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Performance benchmark
      run: |
        echo "ðŸš€ Performance Benchmark Results" >> $GITHUB_STEP_SUMMARY
        echo "================================" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        python benchmark.py >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
    
    - name: Large scale test
      run: |
        echo "ðŸ§® Large Scale Test (1000 primes)" >> $GITHUB_STEP_SUMMARY
        echo "===================================" >> $GITHUB_STEP_SUMMARY
        start_time=$(date +%s.%N)
        python binary_prime_engine_pro.py --start 1 --limit 1000 --quiet > /dev/null
        end_time=$(date +%s.%N)
        duration=$(echo "$end_time - $start_time" | bc)
        rate=$(echo "scale=2; 1000 / $duration" | bc)
        echo "âœ… Generated 1000 primes in ${duration}s (${rate} primes/sec)" >> $GITHUB_STEP_SUMMARY

  create-release-assets:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [test, code-quality, performance]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create release archive
      run: |
        zip -r binary-prime-engine-${{ github.ref_name }}.zip \
          *.py \
          *.md \
          *.ini \
          *.txt \
          *.sh \
          .vscode/ \
          .github/ \
          --exclude="*.pyc" "__pycache__/*" "*.log" "*.json"
    
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./binary-prime-engine-${{ github.ref_name }}.zip
        asset_name: binary-prime-engine-${{ github.ref_name }}.zip
        asset_content_type: application/zip
